// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}

//My Functions
//Color Function
@function theme-color($key: 'primary', $variant: 'base') {
  $map: map-get($theme-colors, $key);
  @return map-get($map, $variant);
}

//text function
@function text-scale($level) {
  @return map-get(map-get($text-settings, $level), 'font-size');
}

@function line-height($level) {
  @return map-get(map-get($text-settings, $level), 'line-height');
}

//


@function weight($weight-name){
  @return map-get($font-weight,$weight-name);
}

@function calcItemWidth($n,$t, $space)
{
  $width: calc(calc(100% / $t ) - $space * ($t + 1) ) ;
  @return $width;
  
}
@function item-background-color($color-name){
@return map-get($map: $item-background-color, $key: $color-name);
}

@function item-text-color($color-name){
  @return map-get($map: $item-text-color, $key: $color-name);
}

@function item-color($color-name){
  @return map-get($map: $item-color, $key: $color-name);
}

/*
This is using with @mixin fluid-type
*/
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}